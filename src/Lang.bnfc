Program. Program ::= [Def] ;

terminator Def ";" ;

DSig. Def ::= Sig ;
DBind. Def ::= Bind ;
DData. Def ::= Data ;

Bind. Bind ::= Ident "=" Expr ;
Sig. Sig   ::= Ident ":" Domain ;

-------------------------------------------------------------------------------
-- * Data Types
-------------------------------------------------------------------------------

Data. Data ::= "data" Domain "=" [Inj] ;

Inj. Inj ::= Ident [Type] ;

separator Inj "|" ;
separator Type " " ;

-------------------------------------------------------------------------------
-- * Type
-------------------------------------------------------------------------------

TAll. Domain ::= "forall" [TVar] "." Type ;
TEmpty. Domain ::= Type ;

TVar. Type2 ::= TVar ;
TApp. Type1 ::= Type1 Type2 ;
TFun. Type ::= Type1 "->" Type ;

MkTVar. TVar ::= Ident ;

separator nonempty TVar " " ;

coercions Type 2 ;

-------------------------------------------------------------------------------
-- * Pattern matching
-------------------------------------------------------------------------------

Branch. Branch ::= Pattern "=>" Expr ;
terminator Branch ";" ;

PLit.   Pattern1 ::= Lit ;
PCatch. Pattern1 ::= "_" ;
PVar.   Pattern1 ::= Ident ;
PInj.   Pattern ::= Ident [Pattern1] ;

coercions Pattern 1 ;
separator nonempty Pattern1 " " ;

-------------------------------------------------------------------------------
-- * Expressions
-------------------------------------------------------------------------------

-- Let EPat act as variable and constructor
EPat.         Expr3 ::= Ident ;
ELit.         Expr3 ::= Lit ;
EApp.         Expr2 ::= Expr2 Expr3 ;
EAppExplicit. Expr2 ::= Expr2 "{" Type "}" Expr3 ;
ECase.        Expr2 ::= "case" Expr1 "of" "{" [Branch] "}" ;
ELet.         Expr1 ::= "let" Ident "=" Expr1 "in" Expr2 ;
ELam.         Expr1 ::= "\\" Ident "->" Expr1 ;
EAnn.         Expr ::= Expr ":" Type ;

coercions Expr 3 ;

-------------------------------------------------------------------------------
-- * Literals
-------------------------------------------------------------------------------

LInt.    Lit ::= Integer ;
LChar.   Lit ::= Char ;
LString. Lit ::= String ;

-------------------------------------------------------------------------------
-- * Aux
-------------------------------------------------------------------------------

comment "#" ;
comment "//" "\\\\" ;
